@c @node node-name, next-node, prev-node, parent-node
@c   node command tells how to situate a node within the node tree
@c Menus
@c   menu entries have the form: '[entry-display-name]:[\(filename\)]node-name(,|. |\t|\n) [description]'
@c     or '[\(filename\)]node-name-same-as-display-name:: [description]

\input textinfo
@settitle ARM Core Functionality Notes

@c @c Title page
@c @titlepage
@c @title Test
@c @end titlepage

@c @c Table of contents
@c @contents

@c @ifnottex
@node Top
@top ARM Core Functionality Notes
@c @end ifnottex

@menu
* Fetch Process::
@end menu

@node Fetch Process
Instruction Fetch Process:
@enumerate
@item Processor issues instruction fetch.
@item Simultaeously does the following:
@itemize
@item Translates VA via TLB. If protection check fails, the fetch aborts.
@*@w{   }VAs use Secure or Non-secure TLBs depending on the processor state.
@item Looks up address in L1 cache.
@end itemize
@item Returns L1 hit, otherwise PA (addr after translation) is passed to L2 cache.
@item Returns L2 hit, otherwise issues AXI transaction to fetch from external memory.
@itemize @w{}
  @item Non-secure access: If processor is in Non-secure mode or in secure mode and memory location has non-secure attribute.
  @item Secure access: If processor is in secure state and memory location has secure attribute.
@end itemize
@end enumerate

Memory Access Sequence
@enumerate
@item Issues TLB lookup based on requested VMA, ASID and security state.
TLB entry matches if all:
@itemize
  @item Requested VA matches TLB assigned vA.
  @item NSTID matches secure or non-secure state of request.
  @item ASID matches current ASID or is global.
@end itemize
@item Performs TLB walk if lookup misses.
(NSTID?)
PD0 or PD1 in TTB CR to enable TLB walks

Note, care must be taken to ensure that only a single TLB matches at any one time.

secure stage 1 MMU
non-secure stage 1 MMU
non-secure stage 2 MMU
non-secure PL2 stage 1 MMU

VA -+-------+--- Sec ---> S1_MMU -----------------------> PA
    |       |    
    |       +--- NSec --> S1_MMU --+-- Not PL2 ---------> PA
    |                              |
    +-- PL2 -----------------------+-- PL2 --> S2_MMU --> PA

Cache Notes
  Possible write buffer situated in between cache and main memory to allow the cache to still operate after a line has been evicted back to main memory; the write buffer
    will overload the writes to main memory from the cache.

Layer-by-layer attribute modification (constraining and expanding attrs perhaps?) in multi-staged MMU designs.
L3 interconnect load monitoring

Cache cleaning (write-back coherency by other observers) doesn't update memory if it was already updated by an observer outside the shareability domain of that cached address location?

@bye
